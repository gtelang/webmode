;; Set files ending in .web to open in web mode. 
(add-to-list 'auto-mode-alist '("\\.web\\'" . web-mode))

(define-derived-mode web-mode org-mode "web-mode"
  "Major mode based on Org-mode"
    (setq major-mode 'web-mode)
    (setq mode-name "Web Mode")
    (insert "Hello World"))

;; ;;; WEB MODE
;; ;;; A mode derived from org-mode, for
;; ;;; literate programming in the Knuthian
;; ;;; tradition. 
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   ;; From here on out, just define various
;;   ;; functions, and them to the appropriate
;;   ;; hooks. Most of the functions are
;;   ;; interactive, and which will operate
;;   ;; on the whole buffer or highlighted
;;   ;; portions of text. 
;;   )

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;;; TANGLING
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; Local tangling
;; ;; Depending on the position of the cursor,
;; ;; and a number given, open up another
;; ;; buffer (window?) which contains all the
;; ;; code blocks expanded below that point. 

;; ;-----————————————————————————————
;; ;; Insert line-numbers as comments in the web file
;; ;; where a particular piece of code is
;; ;; is defined when tangling into an org
;; ;; file. The comment-style will obviosuly depend
;; ;; on the language. 


;; ;;---------------------------------------------------------
;; ;; Reverse Tangling, by adding all the changed source code
;; ;; into the web-file. for this you will need to add some
;; ;; extra stuff to the specialized comments which you
;; ;; need to add special text-properties to. Those parts
;; ;; should be unwritable, also some information about
;; ;; the amount of indentation....? not sure this is useful
;; ;; this is good when some others have edited your code,
;; ;; respecting the markers. Extra added code goes to the
;; ;; end of the web-file with suffient warnings from the
;; ;; script. Write reverse tangler in elisp or Haskell?
;; ;; probably latter is better, when used as a stand-alone
;; ;; script. Or possibly, keep background buffers such that
;; ;; whenever cursor is in that position, the buffer
;; ;; in org mode zooms down to the approiate section, or
;; ;; even when in C-mode plain which is opened, it
;; ;; automatically opens to the appropriate-section.
;; ;; When editing files which have been tangled to by
;; ;; web files, they are opened in read-only mode,
;; ;; but at a press of a button the appropriate section
;; ;; from the web file is opened up so that you can do editing.
;; ;; this seems a much cleaner alternative. 

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; WEAVING
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; At the top of the file, include a graph of the
;; ;; directory structure of the source-code files. 
;; ;; All this can be autogenerated with the tree
;; ;; function, or with dot, so that automatically
;; ;; you can see how the various code-files are
;; ;; structured. This will typically be added to the
;; ;; appendix or at the beginning. I think appendix
;; ;; is better. 

;; ;————————————————————————————
;; (defun web-mode-weave-to-org
;;     "Convert the web buffer into a corresponding
;;      org buffer, which contains the extra latex 
;;      information necessary for binding. Extra
;;      information will contain things like the 
;;      <...> three bars sign nicely-formatted. 
     
;;      Make this available in another buffer which 
;;      is uneditable. 

;;      Useful when debugging Web-mode. 
;;     "
;;   nil
;;   )

;; ;————————————————————————————
;; ;; Called as an interactive function, possibly with
;; ;; key-press. The most important thing that it does
;; ;; is generate all the hyper-linked cross-references
;; ;; between the sections, and mentioning where a
;; ;; particular code-chunk is used. 
;; (defun web-mode-weave
;;     "Weave the web-mode buffer into the Latex document"
;;      nil
;;     )

;; ; Note the See also .... mentions where a particular code
;; ; block is incremented and extended. 

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; HELPER FUNCTIONS FOR BOTH WEAVING AND TANGLING
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (defun web-mode-get-named-code-chunk-info
;;     " For each code-chunk that has a name, 
;;       get information about which section
;;       it is defined in and where the code-chunk 
;;       is used. For positional information
;;       follow the part-chapter-section route
;;       or chapter-section-subsection route. 

;;       Thus the \newchunk command should be defined
;;       in two ways depending on whether the 
;;       documentclass type is a book or article
;;       for extracting the positional information. 

;;       This information will also get used in a 
;;       chapter-wise index used at the end of each 
;;       chapter and finally the book. 
;;     "
;;   nil
;;   )
;; ;————————————————————————————
;; ;; Make company mode always list the currently
;; ;; named code-blocks

;; ;————————————————————————————
;; ;; Use etags to generate list of types and variables
;; ;; inside various name-spaces and then instead of
;; ;; line-numbers, substitue them with chapter-section
;; ;; numbers corresponding to the pdf. Make this more
;; ;; and more sophisticated, i.e. have a etags program
;; ;; which is specific to org-mode which jumps between
;; ;; different sections. 

;; ;————————————————————————————
;; ;; Scan every token inside code-block and throw-away
;; ;; all the unnecessary tokens, 

;; ;————————————————————————————
;; ;; Latexify all the math things used inside
;; ;; code-blocks. Thus you can make α and β
;; ;; inside comments! This is however just a
;; ;; fancy feature, not needed right now. 

;; ;————————————————————————————
;; ;; Decide background for current block. If code
;; ;; block is being freshly defined then use one
;; ;; color, else use different color, alternatively
;; ;; keep a bold red unwritable tag marker.
